$ valgrind --leak-check=full ./testVal
==64032== Memcheck, a memory error detector
==64032== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==64032== Using Valgrind-3.14.0.GIT and LibVEX; rerun with -h for copyright info
==64032== Command: ./testVal
==64032==
--64032-- run: /usr/bin/dsymutil "./testVal"
==64032== Invalid write of size 4
==64032==    at 0x100000F23: foo (main.c:6)
==64032==    by 0x100000F6A: main (main.c:13)
==64032==  Address 0x100d55b9c is 4 bytes after a block of size 40 alloc'd
==64032==    at 0x1000AC996: malloc (in /usr/local/Cellar/valgrind/HEAD-1cb4ab6/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==64032==    by 0x100000F13: foo (main.c:5)
==64032==    by 0x100000F6A: main (main.c:13)
==64032==
==64032== Invalid read of size 4
==64032==    at 0x100000F2E: foo (main.c:7)
==64032==    by 0x100000F6A: main (main.c:13)
==64032==  Address 0x100d55b9c is 4 bytes after a block of size 40 alloc'd
==64032==    at 0x1000AC996: malloc (in /usr/local/Cellar/valgrind/HEAD-1cb4ab6/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==64032==    by 0x100000F13: foo (main.c:5)
==64032==    by 0x100000F6A: main (main.c:13)
==64032==
pi[11]: 100==64032==
==64032== HEAP SUMMARY:
==64032==     in use at exit: 23,237 bytes in 167 blocks
==64032==   total heap usage: 188 allocs, 21 frees, 31,685 bytes allocated
==64032==
==64032== 40 bytes in 1 blocks are definitely lost in loss record 14 of 43
==64032==    at 0x1000AC996: malloc (in /usr/local/Cellar/valgrind/HEAD-1cb4ab6/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==64032==    by 0x100000F13: foo (main.c:5)
==64032==    by 0x100000F6A: main (main.c:13)
==64032==
==64032== 72 bytes in 3 blocks are possibly lost in loss record 26 of 43
==64032==    at 0x1000AD002: calloc (in /usr/local/Cellar/valgrind/HEAD-1cb4ab6/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==64032==    by 0x1006C17E2: map_images_nolock (in /usr/lib/libobjc.A.dylib)
==64032==    by 0x1006D47DA: objc_object::sidetable_retainCount() (in /usr/lib/libobjc.A.dylib)
==64032==    by 0x100007C64: dyld::notifyBatchPartial(dyld_image_states, bool, char const* (*)(dyld_image_states, unsigned int, dyld_image_info const*), bool, bool) (in /usr/lib/dyld)
==64032==    by 0x100007E39: dyld::registerObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*)) (in /usr/lib/dyld)
==64032==    by 0x10022181D: _dyld_objc_notify_register (in /usr/lib/system/libdyld.dylib)
==64032==    by 0x1006C1075: _objc_init (in /usr/lib/libobjc.A.dylib)
==64032==    by 0x1001ABACC: _os_object_init (in /usr/lib/system/libdispatch.dylib)
==64032==    by 0x1001ABAB3: libdispatch_init (in /usr/lib/system/libdispatch.dylib)
==64032==    by 0x1000BB9C2: libSystem_initializer (in /usr/lib/libSystem.B.dylib)
==64032==    by 0x100019A09: ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==64032==    by 0x100019C39: ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==64032==
==64032== LEAK SUMMARY:
==64032==    definitely lost: 40 bytes in 1 blocks
==64032==    indirectly lost: 0 bytes in 0 blocks
==64032==      possibly lost: 72 bytes in 3 blocks
==64032==    still reachable: 200 bytes in 6 blocks
==64032==         suppressed: 22,925 bytes in 157 blocks
==64032== Reachable blocks (those to which a pointer was found) are not shown.
==64032== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==64032==
==64032== For counts of detected and suppressed errors, rerun with: -v
==64032== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 11 from 11)
